
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  name            String
  email           String    @unique
  passwordHash    String
  stripeCustomerId String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  companies       Company[]
  invoices        Invoice[]
  subscriptions   Subscription[]
  clients         Client[]
}

model Company {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  name       String
  logoUrl    String?
  address    String?
  taxInfo    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  invoices   Invoice[]
}

model Invoice {
  id                  String   @id @default(uuid())
  user                User     @relation(fields: [userId], references: [id])
  userId              String
  company             Company  @relation(fields: [companyId], references: [id])
  companyId           String
  clientName          String
  clientEmail         String
  items               Json
  tax                 Float
  total               Float
  status              String
  dueDate             DateTime
  pdfUrl              String?
  isRecurring         Boolean  @default(false)
  recurrenceInterval  String?
  paymentDetails      String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  clientId     String?
  client       Client?  @relation(fields: [clientId], references: [id])
}

model Subscription {
  id                   String   @id @default(uuid())
  user                 User     @relation(fields: [userId], references: [id])
  userId              String
  stripeSubscriptionId String
  planName            String
  status              String
  startDate           DateTime
  endDate             DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Client {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId  String
  user    User      @relation(fields: [userId], references: [id])

  invoices Invoice[]
}

model Waitlist {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
}
